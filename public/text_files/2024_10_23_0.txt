E[2024.11.06]E
D[2024.10.23]D
T[[Plate Rush!] Devlog #1: Conveyor Belts and Items]T
S[I talk about my in-progress game idea and mainly about my implementation of the conveyor belt.]S
## >> The Game!

This is the first devlog for my game made with [Pixelbox](https://pixwlk.itch.io/pixelbox). I decided that *Plate Rush!* is the title of the game, although I realize now that it sounds quite close to *PlateUp!*. If I find a better name then I'll change it.

## >> Plate Rush Inspiration

Inspired mainly by [*Sushi Belt*](https://munro.itch.io/sushi-belt), and games like [*Overcooked*](https://store.steampowered.com/app/448510/Overcooked/), and [*PlateUp!*](https://store.steampowered.com/app/1599600/PlateUp/).

I wanted to make a game based on features that I'm interested in, like cooking something quickly and serving food to customers. I also wanted to try my hand at creating a conveyor belt (commonly?) seen in sushi restaurants. It's sort of a novelty, this idea of food being delivered by a conveyor belt straight to your table.

## >> Pixelbox

It's the game engine / framework that I'm using for this project. I used it before because it was simple to start with, and it provided easy access to the sprites and maps for editing. Unfortunately, the framework and game engine hasn't been updated in a long time, around 3-4 years ago.

It still works but it could use more features and ease of use for its UI. It definitely needs to be updated as well. It would be better to make a game with established game engines, like Godot, but for this small game it's fine.

## >> Items and Conveyor Belts

#### >> Belt Properties / Implementation

On the map where I drew a loop of belts, I check for a tile that is a belt, save that tile, then count every belt that exists on the map. Then I create a separate array to store belts in: giving them an id; an id for the belt that it's connected to; a fullness check; where it's facing; if it's the end; their positions; what type of tile is it; and is it a counter for drawing order. 

For belts and their connections, I check the cardinal directions based on the flip properties and my arrow sprite. Since belts have their direction established, just check what's in front of them, and see if there's a belt or not, and save their id.

Now onto moving the items.

#### >> First Approach

What does a conveyor belt do? A conveyor belt moves something on it towards the direction that it's facing. Following that idea, using the belt's fullness property, check if that's true, if so then move the item on it to the next belt and mark itself as empty.

While the items did move forward, this simple approach didn't work as intended. Iterating through every belt forward would cause items to move at a fast speed, and iterating backwards would slow the items down for a reasonable amount of time, but displayed the same issue when two or more items are on the belt.

Additionally, if the entire conveyor belt was full, then no items would move at all. This doesn't make sense in a real-life version of a conveyor belt.

#### >> Second Approach

In the loop I would check if there was an item on the next belt, then save it, and place the current belt's item on the next belt. After that, move the saved item onto the next next belt, checking if it's full and repeating the previous steps. Obviously, this approach doesn't work because items will be lost, for example, when there are items on the belts beyond the next belt, or if the conveyor belt was full.

During this process, I added a timer so the conveyor belt waits a certain amount of time before updating all items. This will add a sort of shuffle to the items, and stop all the items from moving super fast.

#### >> Bugs And Fixes Between Approaches (Item Teleportation?)

Taking a break from the other belt issues, I realized that the ids for the conveyor belts didn't connect together in the loop as intended. I stored them in an array in the order that they were found, so the ids had to match the order of the belts. Items were moving from left to right and from top to bottom order, in a zig-zag. This isn't the correct order for that loop, which is left, down, right, up.

To fix this issue, I made use of the directions of each conveyor belt (which I should have done so in the first place), and reassigned id order to each one. Items are looping properly, but the issue where items teleport to the next full belt wasn't resolved yet.

#### >> Actual Items

Before going further, placeholder id numbers for items were replaced with objects. Items have names, ids, and positions (x,y). Depending on their id, additional properties would be added to them. Items were decoupled from the conveyor belt. Items will take the position of the next belt, and they aren't stored as a property of the belt. The belt will only see if it's full or not. Now items move properly along empty spaces, and don't teleport to the next item spot.

I also implemented picking up and placing items. This introduced more problems with item loss on the conveyor belt. Sometimes I could place an item on top of another one, losing the bottom item. For a game that needs this mechanic to work well, this bug needed to be fixed.

#### >> Third [Time's the Charm!] Approach

I had this persistent thought in my mind that I was doing too many things at once in one loop. I was moving items around and setting the current belt to not full and the next belt to full in the same loop. When players intervene in this process by picking up/placing down an item when items were being updated, then the item was placed down on a belt that was believed to not be full.

The current belt will be marked as empty, and the items will take the position of the next belt after it. In a separate loop, the items now on the next belt as their current belt, this belt is set to full. This resolved the issue of modifying belt properties at the same time. Essentially, read from the next belt only, and write to the current belt. Don't modify the next belt yet.

I also separated the items on the belt into two different groups by even and odd ids. This helped with the idea of splitting apart the loops.

After this approach, the player wasn't able to put down items onto full belts. After testing that several times, aka, spamming the interact button on a full conveyor belt to see if anything happens, it looked like that bug was fixed. There may be bugs related to the npc and player collecting from the belt at the same time, but I haven't confirmed this yet. I was satisfied that everything worked as intended and deemed this approach good enough. The important part was to only modify the current belt that the item is on. Don't modify it too early until the item is on the belt, or the player could place items down when the full property is set to false.

## Belt Caveats

The belts I have created only work in a loop, and it only works for 1 loop. They would need some tweaking if I wanted to have several loops of belts going on at the same time, or if the loop is cut off. They're also limited to 1 direction.

The way I implemented the conveyor belt, the belts don't move along with the items, they give the items positions instead. I guess it's not quite an actual conveyor belt, but mimicking one.

## >> Additional Thoughts

*For the game...*

- Choose different palette colors aside from the default palette. The colors feel too limiting to work well in a small pixelated game with minimal space for detail. It does provide a challenge to create art that can be seen easily though.
- Create an object to store the belts, so the order doesn't matter, only the ids do. This would allow more loops to be created too.
- Better yet, make the belts themselves moving blocks like an actual conveyor belt
- Frame-rate dependence...
- Could definitely consider diagonal connections based on given tile properties, or making additional tiles/sprites for them
- Always list your bugs down, it's helpful to describe them to see what went wrong, and then cross them out when you fixed the problem.

*For the website...*

- Make sure to write the devlogs as close to the development of the project. Everything is fresh in the mind, and features to write about are consistent with progress. 
- Titles should feature something important that happened in development. Save the rest of the features for later. This can result in better, concise devlogs.
- Should be consistent on writing numbers (1 or one).
- How are the logs looking now? They look a lot better with the additional markdown. I also noticed the (Firefox) reader is activated for these logs. Don't refresh the page in the reader though or it won't load. Just activate it again if you do. The markdown fixed a lot of the formatting that showed up in the original log on the reader too, which is nice.
- Right now it is awful to look at on mobile, I should format the website for it as well.

## >> End

It may be or not be the exact process I went through, but it should be accurate enough. After all, this is a decent way of leaving notes behind if I ever need it in the future. I do hope I come back to read this though. In that case... Hello Future ME, whether it'll be minutes or days from now, I hope the writing above is legible enough to decipher later. If not, I leave it up to you to come back and edit it for better reading purposes. Thanks.

And thank YOU, for reading.