2025.06.17;
2025.06.17;
[Devlogs Maker] #2: Brief Overview of Basic Features;
The minimum features in the app so far can: post devlogs; get devlogs & edit them; & delete devlogs. Import formatted devlogs & export them to system. Clear text for a clean slate. Verify/refresh tokens for user.;
## >> Intro

Hi everyone, I'm going to get to the basic features (suppose this is a MVP) of Devlogs Maker. I went over the basic process in my [last devlog](https://jennyton88.github.io/devlogs/log/2025_06_08_0).

## >> Verify User

I first created a Github App on my user account, so I could get the client id and key for the app. I needed to use those credentials for requesting a user code for the app through the device flow, since it's not a web app. I used this [tutorial](https://docs.github.com/en/apps/creating-github-apps/authenticating-with-a-github-app/generating-a-user-access-token-for-a-github-app#using-the-device-flow-to-generate-a-user-access-token) from Github Docs. I also used this [tutorial](https://docs.github.com/en/apps/creating-github-apps/authenticating-with-a-github-app/refreshing-user-access-tokens#refreshing-a-user-access-token-with-a-refresh-token) for refreshing user access tokens.

I added buttons to match the steps required to get the user code. 

- '1. Request Verify Code' to send a POST request through HTTPRequest asking Github for the device, user codes. 
- '2. Verify Code' is the link where the user clicks to get sent to their web browser. The verification code displayed will be used at the link.
- '3. Tell App to Confirm' is used to poll Github and see if the user did confirm access for the app. Then it'll return the refresh and user access token that will be used to post these devlogs on the repo.
- '4. Refresh User Token' is for the last step after all of this, which is requesting a new user access token once the last one has expired. This can be repeated multiple times until the expiration of the refresh token.

I added an 'Override' button just in case things went wrong, but it doesn't seem useful, so I'll remove it in the future. Its purpose is to enable the buttons to be clickable if something went wrong.

The date of user access token expiration is also displayed on the screen too, although I should format it to be more readable... The expiration date is calculated through a custom method based on the time of requesting the code. I need to account for centuries but I don't think I'll be using the app that long? I'll have to keep that in mind too.

I also added some brief instructions just in case I forgot what to do if I didn't use this app for a while.

## >> Devlogs

I used (Github's REST API)[https://docs.github.com/en/rest/repos/contents?apiVersion=2022-11-28#get-repository-content] for fetching the contents of the repo.

### >> Get Posts

If I want to edit some devlogs I already have on the repo, I needed to fetch them down locally. 'Get Posts' makes a GET request to Github at the specific repo and branch that the app has access to (dictated by the github app permissions). The resulting names and download URLs are placed into the 'Devlogs List' where they are listed one by one. Each devlog gets a 'Edit' and 'Delete' button for modifying those devlogs.

The other files like the directory and projects info text should be editable as well, but shouldn't show up in the devlogs list. They aren't editable at this moment because editing is specifically for formatted devlogs, not regular text files.

### >> Edit Post

This button is used specifically for posting edited devlogs from the 'Devlogs List'. I want to change this and remove this button so there is only one button for posting devlogs, regardless of editing it or not.

### >> Delete

Deleting a devlog from the repo is simple. Send a DELETE request over and have the file removed from the repo. There's also a warning implemented just in case I don't want to do that.

As I'm writing this I realize that I would need to delete the file name from the directory too. It's great to write things down. I've already added the issue on Github so I don't forget. Good.

### >> Clear Text

If I wanted to scrap the current devlog I just needed to click 'Clear Text' to do so. It comes with a warning just in case I didn't want to do that.

## Finalize

### >> Create file name from today's date

I had to manually name these files while typing them because their names are important for listing them on the website. Having this button around is pretty useful for formatting the name so I don't have to do it.

### >> '>> Format Post <<'

This button is important because if I didn't click it, then the devlog will not be previewable at its current state, and exporting / posting the text would not have any current changes. This needs to be changed since I don't want to click it everytime, and if I forget to do so I'll lose my changes, and that'll be pretty bad.

## >> Import / Export Text

At this moment there is no save / load feature for the devlogs, so I needed some way to keep my progress on the devlogs when I needed to go do something else. I added the buttons in the menu 'Import Text' and 'Export Text' for this purpose. I can pick up where I left off by importing a devlog text file in, and save it for later by exporting the text to my 'Downloads' folder.

Tip: To export the text file with its name in the title, I needed to modify the path in the file dialog with the current name in the file name space (so it's not 'Untitled').

## >> End

Conclusion, I need to update this app to make it more user friendly. Thank you for reading!
