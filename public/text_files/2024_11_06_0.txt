E[2024.12.03]E
D[2024.11.06]D
T[[Plate Rush! -> Plate, Rush, Serve!] Devlog #2: Customers / Fixing Items / Published!]T
S[I talk about the customers and how I store items differently.]S

## >> Game Published!

Hello everyone! The game, *Plate Rush!* has been renamed to, *Plate, Rush, Serve!* Adding the third word in the title made it sound more like a countdown. Plate... Rush... SERVE!

Here's a link to it: [*Plate, Rush, Serve!*](https://jennydevs.itch.io/plate-rush-serve)

## >> Customers

#### >> Seats
I separated the seats by table and belt seats. Customers served directly at the conveyor belt can grab an item and leave immediately, while ones that stayed at a table wait till all were served. 

There aren't any benefits in serving groups in this game, but it's satisfying seeing a group leave all their money behind for collection. 

If I were to add some benefits, then the player's score should increase based on the number of customers that they served at that particular table. The player who served the most customers at that table collects extra points, aside from the money that you have to manually collect. That could be unfair, so I would have to consider what type of orders were served at the table too. Difficult recipes could be weighted more in points to balance out the result.

### >> Creating the Customer
Customers attempt to spawn at a constant interval during the game loop. First the customers check what type of seats are available at the restaurant, either the table seats or the belt seats. If either of those are empty, then choose one type randomly and create customers for it.

The customer gets a random order, either food or a drink. They store their seat id and the path they walked. When they're served and ready to leave, they'll walk their previous path back to where they started. They walk based on their individual timers.

### >> Updating the Customer
What they do depends on their states, whether they're sitting, already served, or walking.

#### >> Moving the Customer
I defined areas where the customer could go, in a conveyor belt-like fashion. This walkable area loops around the seats in the center. Before they move in this loop, the customer checks the distance between them and their destination. Then they'll choose the direction that the shorter distance is in. After that, during every update they'll continuously move and check if they reached their destination.

The implementation needs to be improved since it seems like most customers loop the long/opposite way around to get to their seats. The long waiting times may be problematic especially for a time-limited game like this.

#### >> Checking for Their Order
For each customer, iterate through the items sitting on the belt and check if any of those items is front of them. If it's there and it's what the customer ordered, remove it and replace it with money if they're at the belt. If they're at a table, add the order onto the table in front of the customer. This order is replaced with money when everyone is served at that table. (Note: I could check if the item at the key was -1/undefined instead of looping here.)

#### >> Leaving
Once the customers are served, they take the path back where they came from and make the seat available to other customers.

## >> Improving on Items
When items were removed by the player or customer picking up an item, I was originally splicing the array to remove it. This doesn't work for active games, as the index changes for all of the items constantly. It was also inefficient to iterate through every item every time you're looking for a specific one. 

So I moved them to an Object with the item's location being the key (x,y: "2,3"). I also separated the held item from the items group as well. The key point here is to store all the possible locations an item can be placed, (just set the item there or -1 if empty). Now items from different indexes aren't modified when another item is placed or removed. (Could have done a similar thing with a 2D array as well.)

I can spawn items in at specific positions now. Players also sync with the items moving on the conveyor belt much faster too.

## >> Additional Thoughts
- If I come back to this project I would add sound effects, so the gameplay experience is improved.
- I'll also improve on customer navigation.
- Creating everything really stemmed from the conveyor belt outwards. Specifically timers, and 
movement.
- I would like to make another game/level with the current code I have, but placed in a cafeteria setting. It would be closer to *Sushi Belt* where the ingredients would be outside on the counter rather than being in a storage container. It would be easier to pick up, and there would be less menus to look through too. But this depends on the amount of space there is in the level.

## >> End
I stopped at this point so I could work on other projects. I'll add other devlogs for this game when I can. This was a valuable experience to learn from, (especially in debugging), for creating games and other applications.

Thank you for reading.